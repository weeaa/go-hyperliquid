// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid(in *jlexer.Lexer, out *WsMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Data = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Data)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid(out *jwriter.Writer, in WsMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Data {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid1(in *jlexer.Lexer, out *TriggerOrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "triggerPx":
			out.TriggerPx = string(in.String())
		case "isMarket":
			out.IsMarket = bool(in.Bool())
		case "tpsl":
			out.Tpsl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid1(out *jwriter.Writer, in TriggerOrderType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"triggerPx\":"
		out.RawString(prefix[1:])
		out.String(string(in.TriggerPx))
	}
	{
		const prefix string = ",\"isMarket\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMarket))
	}
	{
		const prefix string = ",\"tpsl\":"
		out.RawString(prefix)
		out.String(string(in.Tpsl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TriggerOrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TriggerOrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TriggerOrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TriggerOrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid1(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid2(in *jlexer.Lexer, out *SpotTokenInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "szDecimals":
			out.SzDecimals = int(in.Int())
		case "weiDecimals":
			out.WeiDecimals = int(in.Int())
		case "index":
			out.Index = int(in.Int())
		case "tokenId":
			out.TokenID = string(in.String())
		case "isCanonical":
			out.IsCanonical = bool(in.Bool())
		case "evmContract":
			if in.IsNull() {
				in.Skip()
				out.EvmContract = nil
			} else {
				if out.EvmContract == nil {
					out.EvmContract = new(EvmContract)
				}
				(*out.EvmContract).UnmarshalEasyJSON(in)
			}
		case "fullName":
			if in.IsNull() {
				in.Skip()
				out.FullName = nil
			} else {
				if out.FullName == nil {
					out.FullName = new(string)
				}
				*out.FullName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid2(out *jwriter.Writer, in SpotTokenInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"szDecimals\":"
		out.RawString(prefix)
		out.Int(int(in.SzDecimals))
	}
	{
		const prefix string = ",\"weiDecimals\":"
		out.RawString(prefix)
		out.Int(int(in.WeiDecimals))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"tokenId\":"
		out.RawString(prefix)
		out.String(string(in.TokenID))
	}
	{
		const prefix string = ",\"isCanonical\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCanonical))
	}
	{
		const prefix string = ",\"evmContract\":"
		out.RawString(prefix)
		if in.EvmContract == nil {
			out.RawString("null")
		} else {
			(*in.EvmContract).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fullName\":"
		out.RawString(prefix)
		if in.FullName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FullName))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotTokenInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotTokenInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotTokenInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotTokenInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid2(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid3(in *jlexer.Lexer, out *SpotMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "universe":
			if in.IsNull() {
				in.Skip()
				out.Universe = nil
			} else {
				in.Delim('[')
				if out.Universe == nil {
					if !in.IsDelim(']') {
						out.Universe = make([]SpotAssetInfo, 0, 1)
					} else {
						out.Universe = []SpotAssetInfo{}
					}
				} else {
					out.Universe = (out.Universe)[:0]
				}
				for !in.IsDelim(']') {
					var v3 SpotAssetInfo
					(v3).UnmarshalEasyJSON(in)
					out.Universe = append(out.Universe, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]SpotTokenInfo, 0, 0)
					} else {
						out.Tokens = []SpotTokenInfo{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v4 SpotTokenInfo
					(v4).UnmarshalEasyJSON(in)
					out.Tokens = append(out.Tokens, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid3(out *jwriter.Writer, in SpotMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"universe\":"
		out.RawString(prefix[1:])
		if in.Universe == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Universe {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tokens\":"
		out.RawString(prefix)
		if in.Tokens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Tokens {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid3(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid4(in *jlexer.Lexer, out *SpotAssetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]int, 0, 8)
					} else {
						out.Tokens = []int{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v9 int
					v9 = int(in.Int())
					out.Tokens = append(out.Tokens, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "index":
			out.Index = int(in.Int())
		case "isCanonical":
			out.IsCanonical = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid4(out *jwriter.Writer, in SpotAssetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"tokens\":"
		out.RawString(prefix)
		if in.Tokens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Tokens {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"isCanonical\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCanonical))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotAssetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotAssetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotAssetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotAssetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid4(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid5(in *jlexer.Lexer, out *SpotAssetCtx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dayNtlVlm":
			out.DayNtlVlm = string(in.String())
		case "markPx":
			out.MarkPx = string(in.String())
		case "midPx":
			if in.IsNull() {
				in.Skip()
				out.MidPx = nil
			} else {
				if out.MidPx == nil {
					out.MidPx = new(string)
				}
				*out.MidPx = string(in.String())
			}
		case "prevDayPx":
			out.PrevDayPx = string(in.String())
		case "circulatingSupply":
			out.CirculatingSupply = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid5(out *jwriter.Writer, in SpotAssetCtx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dayNtlVlm\":"
		out.RawString(prefix[1:])
		out.String(string(in.DayNtlVlm))
	}
	{
		const prefix string = ",\"markPx\":"
		out.RawString(prefix)
		out.String(string(in.MarkPx))
	}
	{
		const prefix string = ",\"midPx\":"
		out.RawString(prefix)
		if in.MidPx == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.MidPx))
		}
	}
	{
		const prefix string = ",\"prevDayPx\":"
		out.RawString(prefix)
		out.String(string(in.PrevDayPx))
	}
	{
		const prefix string = ",\"circulatingSupply\":"
		out.RawString(prefix)
		out.String(string(in.CirculatingSupply))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotAssetCtx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotAssetCtx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotAssetCtx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotAssetCtx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid5(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid6(in *jlexer.Lexer, out *OrderWire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = int(in.Int())
		case "b":
			out.IsBuy = bool(in.Bool())
		case "s":
			out.Size = string(in.String())
		case "p":
			out.LimitPx = string(in.String())
		case "r":
			out.ReduceOnly = bool(in.Bool())
		case "t":
			(out.Type).UnmarshalEasyJSON(in)
		case "c":
			out.Cloid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid6(out *jwriter.Writer, in OrderWire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuy))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.LimitPx))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		(in.Type).MarshalEasyJSON(out)
	}
	if in.Cloid != "" {
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.Cloid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderWire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderWire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderWire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderWire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid6(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid7(in *jlexer.Lexer, out *OrderTypeV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(LimitOrderType)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "trigger":
			if in.IsNull() {
				in.Skip()
				out.Trigger = nil
			} else {
				if out.Trigger == nil {
					out.Trigger = new(TriggerOrderType)
				}
				(*out.Trigger).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid7(out *jwriter.Writer, in OrderTypeV2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.Trigger != nil {
		const prefix string = ",\"trigger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Trigger).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderTypeV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderTypeV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderTypeV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderTypeV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid7(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid8(in *jlexer.Lexer, out *OrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(LimitOrderType)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "trigger":
			if in.IsNull() {
				in.Skip()
				out.Trigger = nil
			} else {
				if out.Trigger == nil {
					out.Trigger = new(TriggerOrderType)
				}
				(*out.Trigger).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid8(out *jwriter.Writer, in OrderType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.Trigger != nil {
		const prefix string = ",\"trigger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Trigger).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid8(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid9(in *jlexer.Lexer, out *OrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "is_buy":
			out.IsBuy = bool(in.Bool())
		case "sz":
			out.Size = float64(in.Float64())
		case "limit_px":
			out.LimitPx = float64(in.Float64())
		case "order_type":
			(out.OrderType).UnmarshalEasyJSON(in)
		case "reduce_only":
			out.ReduceOnly = bool(in.Bool())
		case "cloid":
			if in.IsNull() {
				in.Skip()
				out.Cloid = nil
			} else {
				if out.Cloid == nil {
					out.Cloid = new(string)
				}
				*out.Cloid = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid9(out *jwriter.Writer, in OrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"is_buy\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuy))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.Float64(float64(in.Size))
	}
	{
		const prefix string = ",\"limit_px\":"
		out.RawString(prefix)
		out.Float64(float64(in.LimitPx))
	}
	{
		const prefix string = ",\"order_type\":"
		out.RawString(prefix)
		(in.OrderType).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reduce_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	if in.Cloid != nil {
		const prefix string = ",\"cloid\":"
		out.RawString(prefix)
		out.String(string(*in.Cloid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid9(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid10(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "universe":
			if in.IsNull() {
				in.Skip()
				out.Universe = nil
			} else {
				in.Delim('[')
				if out.Universe == nil {
					if !in.IsDelim(']') {
						out.Universe = make([]AssetInfo, 0, 2)
					} else {
						out.Universe = []AssetInfo{}
					}
				} else {
					out.Universe = (out.Universe)[:0]
				}
				for !in.IsDelim(']') {
					var v12 AssetInfo
					(v12).UnmarshalEasyJSON(in)
					out.Universe = append(out.Universe, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid10(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"universe\":"
		out.RawString(prefix[1:])
		if in.Universe == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Universe {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid10(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid11(in *jlexer.Lexer, out *LimitOrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tif":
			out.Tif = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid11(out *jwriter.Writer, in LimitOrderType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tif\":"
		out.RawString(prefix[1:])
		out.String(string(in.Tif))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid11(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid12(in *jlexer.Lexer, out *EvmContract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "evm_extra_wei_decimals":
			out.EvmExtraWeiDecimals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid12(out *jwriter.Writer, in EvmContract) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"evm_extra_wei_decimals\":"
		out.RawString(prefix)
		out.Int(int(in.EvmExtraWeiDecimals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EvmContract) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EvmContract) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EvmContract) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EvmContract) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid12(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid13(in *jlexer.Lexer, out *BuilderInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "b":
			out.Builder = string(in.String())
		case "f":
			out.Fee = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid13(out *jwriter.Writer, in BuilderInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix[1:])
		out.String(string(in.Builder))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int(int(in.Fee))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuilderInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuilderInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuilderInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuilderInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid13(l, v)
}
func easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid14(in *jlexer.Lexer, out *AssetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "szDecimals":
			out.SzDecimals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid14(out *jwriter.Writer, in AssetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"szDecimals\":"
		out.RawString(prefix)
		out.Int(int(in.SzDecimals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComWeeaaGoHyperliquid14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComWeeaaGoHyperliquid14(l, v)
}
